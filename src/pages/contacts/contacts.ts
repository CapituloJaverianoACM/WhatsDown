import { Component, OnInit } from '@angular/core';
import { IonicPage, NavController, NavParams, AlertController } from 'ionic-angular';
import { UserProvider } from '../../providers/user/user';
import { User } from '../../shared/user';
import { Response } from '@angular/http';

/**
 * Generated class for the ContactsPage page.
 *
 * See http://ionicframework.com/docs/components/#navigation for more info
 * on Ionic pages and navigation.
 */

const CONTACT_ADDED_SUCCESS = 'Contact added successfully!';
const CONTACT_DELETED_SUCCESS = 'Contact deleted successfully!';

@IonicPage()
@Component({
  selector: 'page-contacts',
  templateUrl: 'contacts.html',
})
export class ContactsPage implements OnInit {

  contacts: User[];

  constructor(
    public navCtrl: NavController,
    private userProvider: UserProvider,
    public navParams: NavParams,
    private alertCtrl: AlertController) { }

  ngOnInit() {
    this.onUpdateContactList();
  }

  ionViewDidLoad() {
    console.log('ionViewDidLoad ContactsPage');
  }

  /**
    * Updates the contact lists.
    */
  onUpdateContactList() {
    this.userProvider.getUserContacts()
    .subscribe( (query) => { this.contacts = query },
    errmess => this.responseErrorHandler(errmess) );
  }

  /**
    * Opens a dialog for the user to insert the new contact's
    * username and adds it.
    */
  onAddContact() {
    let prompt = this.alertCtrl.create({
      title: 'Add Contact',
      message: "Enter the username of the contact you whant to add.",
      inputs: [
        {
          name: 'newUsername',
          placeholder: 'New Contact Username'
        },
      ],
      buttons: [
        { text: 'Cancel' },
        { text: 'Save', handler: data => {
          this.saveContactHandler(data.newUsername);
          }
        }
      ]
    });
    prompt.present();
  }

  /**
    * Use the provider to add the new contat to the user's contact list.
    * @param {string} newContactUsername new contact's username
    */
  saveContactHandler(newContactUsername: string) {
    this.userProvider.addContact(newContactUsername)
      .subscribe( (response) => {
        this.responseHandler(response, CONTACT_ADDED_SUCCESS);
        this.onUpdateContactList();
      },
      errmess => this.responseErrorHandler(errmess) );
  }

  /**
    * Displays an alert based on the error's message.
    * @param {any} errmess JSON with error generated by the API.
    */
  responseErrorHandler(errmess: any) {
    let registerErrorAlert = this.alertCtrl.create({
      title: 'Ups...',
      subTitle: errmess.message,
      buttons: ['Dismiss']
    });
    registerErrorAlert.present();
  }

  /**
    * Handles the response provided by the API when trying to add
    * a new contact.
    * @param {Response} response API's response.
    * @param {string} alertBody alert's body.
    */
  responseHandler(response: Response, alertBody: string) {
    if(response.status === 200) {
      let addContactConfirmation = this.alertCtrl.create({
        title: 'Yay!',
        subTitle: alertBody,
        buttons: ['Dismiss']
      });
      addContactConfirmation.present();
    }
  }

  /**
    * Delete selected user.
    * @param {string} deleteContactUsername contact username to delete
    */
  onDeleteContact(deleteContactUsername: string) {
    this.userProvider.removeContact(deleteContactUsername)
      .subscribe( (response) => {
        this.responseHandler(response, CONTACT_DELETED_SUCCESS);
        this.onUpdateContactList();
      },
      errmess => this.responseErrorHandler(errmess) );
  }

}
