import { Component, OnInit } from '@angular/core';
import { IonicPage, NavController, NavParams } from 'ionic-angular';
import { AlertController } from 'ionic-angular';
import { UserProvider } from '../../providers/user/user';
import { ChatProvider } from '../../providers/chat/chat';
import { ConversationPage } from '../../pages/conversation/conversation';
import { Chat } from '../../shared/chat';

/**
 * Generated class for the ChatsPage page.
 *
 * See http://ionicframework.com/docs/components/#navigation for more info
 * on Ionic pages and navigation.
 */
@IonicPage()
@Component({
  selector: 'page-chats',
  templateUrl: 'chats.html',
})
export class ChatsPage implements OnInit {

  usersChats: Chat[];

  constructor(
    public navCtrl: NavController,
    public navParams: NavParams,
    private alertCtrl: AlertController,
    private userProvider: UserProvider,
    private chatProvider: ChatProvider) { }

  ionViewDidLoad() {
    console.log('ionViewDidLoad ChatsPage');
  }

  ngOnInit() {
    this.onUpdateChatList();
  }

  /**
    * Updates the chat list.
    */
  onUpdateChatList() {
    let currentUser: string = this.userProvider.getCurrentLogedInUsername();
    this.chatProvider.getUsersConversation(currentUser)
      .subscribe( (usersChats) => {this.usersChats = usersChats; console.log(this.usersChats); } ),
      errmess => this.fetchErrorHandler(errmess);
  }

  /**
    * Displays an alert based on the error's message.
    * @param {any} errmess JSON with error generated by the API.
    */
  fetchErrorHandler(errmess: any) {
    console.log(errmess);
    let registerErrorAlert = this.alertCtrl.create({
      title: 'Ups...',
      subTitle: errmess.message,
      buttons: ['Dismiss']
    });
    registerErrorAlert.present();
  }

  /**
    * Returns the username to appear in the list item. If the host is the
    * current user returns the recipient and on the contrary.
    * @param {Chat} chatToName chat to be named.
    */
  getScreenUsername(chatToName: Chat) {
    let currentUser: string = this.userProvider.getCurrentLogedInUsername();
    if(chatToName.host === currentUser) return chatToName.recipient;
    else return chatToName.host;
  }

  /**
    * Handler to delete chat.
    * @param {stirng} chatId id of chat to delete.
    */
  onDeleteChat(chatId: string) {
    let currentUser: string = this.userProvider.getCurrentLogedInUsername();
    this.chatProvider.removeChat(currentUser, chatId)
      .subscribe((response) => this.onUpdateChatList() ),
      errmess => this.fetchErrorHandler(errmess);
  }

  /**
    * Navigates to the chat room selected.
    * @param {Chat} userChat chat to go to.
    */
  onChatSelected(userChat: Chat) {
    this.navCtrl.push(ConversationPage, {chatRoom: userChat});
  }
}
